plugins {
    id 'java-library'
    id 'application'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
}

group 'org.quiltmc'
version '1.1.0' + (System.getenv().SNAPSHOTS_URL ? "-SNAPSHOT" : "")

// Target JDK 8
tasks.withType(JavaCompile).configureEach {
    if (JavaVersion.current().isJava9Compatible()) {
        options.release.set(8)
    } else {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
}

compileJava {
    options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}

application {
    mainClass = 'org.quiltmc.mappings_hasher.Main'
}

repositories {
    mavenCentral()
    maven {
        name = "Quilt"
        url = "https://maven.quiltmc.org/repository/release"
    }
}

test {
    useJUnitPlatform()
    testLogging {
        outputs.upToDateWhen {false}
        showStandardStreams = true
    }
    delete 'test'
    mkdir 'test'
    workingDir 'test'
}

configurations {
    implementation {
        extendsFrom shadow
    }
}

dependencies {
    api 'org.cadixdev:lorenz:0.5.7'
    shadow 'org.quiltmc:quilt-json5:1.0.0'
    shadow 'org.quiltmc:lorenz-tiny:3.0.0'
    shadow 'org.cadixdev:lorenz-io-proguard:0.5.7'
    shadow 'org.ow2.asm:asm:9.3'
    shadow 'info.picocli:picocli:4.6.1'
    shadow 'org.quiltmc:launchermeta-parser:1.0.0'

    shadow "info.picocli:picocli:4.6.1"
    annotationProcessor "info.picocli:picocli-codegen:4.6.1"

    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.8.1')
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.8.1')
    testImplementation 'org.quiltmc:tiny-remapper:0.7.1'
}

if (!versionJsonUrl.isEmpty()) {
    tasks.getByName("run").setArgs(["--json", versionJsonUrl])
} else if (!versionZipUrl.isEmpty()) {
    tasks.getByName("run").setArgs(["--zip", versionZipUrl])
} else {
    tasks.getByName("run").setArgs(["--version", minecraftVersion])
}

task mappingsJar(type: Jar) {
    dependsOn run
    from "mappings/mappings.tiny"
    eachFile {
        setName("mappings/mappings.tiny")
    }
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allJava
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation

task relocatePacakages(type: ConfigureShadowRelocation){
    target = tasks.shadowJar
    prefix = "org.quiltmc.mappings_hasher"
}

shadowJar {
    dependsOn relocatePacakages
    archiveClassifier = "all"
    configurations  = [project.configurations.shadow]
}

publishing {
    def ENV = System.getenv()
    publications {
        if (!project.hasProperty("shouldPublishHasher")) {
            mavenHashed(MavenPublication) {
                groupId = 'org.quiltmc'
                artifactId = 'hashed'
                version = minecraftVersion + (System.getenv().SNAPSHOTS_URL ? "-SNAPSHOT" : "")
                artifacts = [mappingsJar, file("mappings/mappings.tiny")]
            }
        }

        if (project.hasProperty("shouldPublishHasher") || ENV.SNAPSHOTS_URL) {
            mavenHasher(MavenPublication) {
                groupId = 'org.quiltmc'
                artifactId = 'mappings-hasher'
                version = version
                artifacts = [jar, shadowJar, sourcesJar]
            }
        }
    }
    repositories {
        if (ENV.MAVEN_URL) {
            maven {
                url = ENV.MAVEN_URL

                credentials {
                    username = ENV.MAVEN_USERNAME
                    password = ENV.MAVEN_PASSWORD
                }
            }
        } else if (ENV.SNAPSHOTS_URL) {
            maven {
                url = ENV.SNAPSHOTS_URL

                credentials {
                    username = ENV.SNAPSHOTS_USERNAME
                    password = ENV.SNAPSHOTS_PASSWORD
                }
            }
        }
    }
}
